#!/usr/bin/ruby
#
# Copyright (c) 2011-2015, 2017, 2018 Apple Inc. All Rights Reserved.
#
# IMPORTANT NOTE: This file is licensed only for use on Apple-branded
# computers and is subject to the terms and conditions of the Apple Software
# License Agreement accompanying the package this file is a part of.
# You may not port this file to another platform without Apple's written consent.
#
# Virtual Root for desktop WebDAV File Sharing
# Runs under per-user Apache instance
#

require 'cgi'
require 'uri'
require 'fileutils'
require 'logger'
require 'time'
require 'open3'
require '/usr/libexec/wfs/Kurl.bundle'
include KurlModule
require 'json'
require 'open3'
require 'cfpropertylist'

$SERVER_LIBRARY_PATH = "/Library/Server"
$SERVER_INSTALL_PATH_PREFIX = "/Applications/Server.app/Contents/ServerRoot"
$SERVER_SETUP_DONE_PATH = "/var/db/.ServerSetupDone"

class SharePointNode
    attr_accessor :name
    attr_accessor :path
    def initialize(name, path)
        @path = path
        @name = URI::unescape(name)
    end
    def userHasAccess
        return true if path.nil? || path == "" || FileTest.writable?(path)
        begin
            Dir.entries(@path)
        rescue
            return false
        end
        return true
    end
    def propfindXML
        now = Time.now.to_i
        etag = "#{@name}#{now}";
        xml = <<-EOT
<D:response xmlns:lp1="DAV:" xmlns:lp2="http://apache.org/dav/props/" xmlns:g0="DAV:">
<D:href>/#{ENV["UserUUID"]}/#{URI::escape(@name)}</D:href>
<D:propstat>
<D:prop>
<lp1:resourcetype><D:collection/></lp1:resourcetype>
<lp1:creationdate>#{now}</lp1:creationdate>
<lp1:getlastmodified>#{now}</lp1:getlastmodified>
<lp1:getetag>"#{etag}"</lp1:getetag>
<D:lockdiscovery/>
<D:getcontenttype>httpd/unix-directory</D:getcontenttype>
</D:prop>
<D:status>HTTP/1.1 200 OK</D:status>
</D:propstat>
<D:propstat>
<D:prop>
<g0:getcontentlength/>
</D:prop>
<D:status>HTTP/1.1 404 Not Found</D:status>
</D:propstat>
</D:response>
        EOT
        return xml
    end
end
class ConfiguredSharePoints
    attr_accessor :sharePoints
    def initialize
        @sharePoints = []
        sharePointsPlistString, ignoredStatus = Open3.capture2("/usr/bin/dscl","-plist", ".",  "-readall", "SharePoints", "webdav_shared", "dsAttrTypeNative:webdav_name", "dsAttrTypeNative:directory_path")
        sharePointsPlist = CFPropertyList::List.new(:data => sharePointsPlistString.force_encoding('UTF-8'))
        allSharePoints = CFPropertyList.native_types(sharePointsPlist.value)
        allSharePoints.each do |sharePoint|
            if sharePoint["dsAttrTypeNative:webdav_shared"].nil? ||
                sharePoint["dsAttrTypeNative:webdav_shared"][0] != "1" || sharePoint["dsAttrTypeNative:directory_path"].nil?
                next
            end
            if sharePoint["dsAttrTypeNative:webdav_name"].nil?
                sharePointName = sharePoint["dsAttrTypeStandard:RecordName"][0]
            else
                sharePointName = sharePoint["dsAttrTypeNative:webdav_name"][0]
            end
            @sharePoints << SharePointNode.new(sharePointName, sharePoint["dsAttrTypeNative:directory_path"][0])
        end
    end
end
$logger = Logger.new("#{ENV['UserLogDir']}/webdavsharing_virtual_root.log")
$logger.level = Logger::INFO
input = $stdin.read        # Keep CGI from gobbling up stdin
cgi = CGI.new
path = cgi.script_name
topLevel = nil
fileName = nil

if ENV["ShareUserHomeDir"] == "true" && !ENV["UserHomeDir"].nil? && ENV["UserHomeDir"] != "" && FileTest.directory?(ENV["UserHomeDir"])
    $synthesizeHomeDirSharePoint = true
else
    $synthesizeHomeDirSharePoint = false
end

$logger.debug("cgi.request_method = #{cgi.request_method} cgi.script_name = #{cgi.script_name}, topLevel=#{topLevel}")
case cgi.request_method
    when 'PROPFIND'
    nodeXML = ""
    allSharePointNodes = ConfiguredSharePoints.new
    if $synthesizeHomeDirSharePoint
        allSharePointNodes.sharePoints << SharePointNode.new(ENV["UserName"], ENV["UserHomeDir"])
    end
    allSharePointNodes.sharePoints.each do |sharePointNode|
        nodeXML = nodeXML + sharePointNode.propfindXML if sharePointNode.userHasAccess
    end
    body = '<?xml version="1.0" encoding="utf-8"?>'
    body += "\n<D:multistatus xmlns:D=\"DAV:\" xmlns:ns0=\"DAV:\">\n#{nodeXML}\n</D:multistatus>\n"
    cgi.out(
            "status" => "207 Multi-Status",
            "type" => "text/xml",
            "DAV" => "1,2"
            ){body}
    when 'OPTIONS'
    cgi.out(
            "status" => "200",
            "Allow" => "OPTIONS,GET,HEAD,POST,PUT,DELETE,TRACE,PROPFIND,PROPPATCH,LOCK,UNLOCK",
            "DAV" => "1,2"
            ){""}
    else
    cgi.out(
            "status" => "405 Method Not Allowed",
            "Allow" => "GET,PUT,PROPFIND,OPTIONS"
            ){""}
end
